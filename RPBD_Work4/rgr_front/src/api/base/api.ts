/* eslint-disable */
/// <reference path="./custom.d.ts" />
// tslint:disable
// @ts-nocheck
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}

/**
 * 
 * @export
 * @interface Passport
 */
export interface Passport {
    /**
     * 
     * @type {string}
     * @memberof Passport
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Passport
     */
    dateExtradition?: string;
    /**
     * 
     * @type {number}
     * @memberof Passport
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Passport
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof Passport
     */
    passportIssuance?: string;
}

/**
 * 
 * @export
 * @interface Registration
 */
export interface Registration {
    /**
     * 
     * @type {string}
     * @memberof Registration
     */
    carRegistrationNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Registration
     */
    dateOfDeparture?: string;
    /**
     * 
     * @type {string}
     * @memberof Registration
     */
    dateOfEntry?: string;
    /**
     * 
     * @type {number}
     * @memberof Registration
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Registration
     */
    parkingNumber?: number;
    /**
     * 
     * @type {Room}
     * @memberof Registration
     */
    roomByRoom?: Room;
    /**
     * 
     * @type {Visitor}
     * @memberof Registration
     */
    visitorByVisitor?: Visitor;
}

/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    livingPeople?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    numberAvailableSeats?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    roomNumber?: number;
}

/**
 * 
 * @export
 * @interface Services
 */
export interface Services {
    /**
     * 
     * @type {number}
     * @memberof Services
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Services
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Services
     */
    price?: string;
}

/**
 * 
 * @export
 * @interface Staff
 */
export interface Staff {
    /**
     * 
     * @type {number}
     * @memberof Staff
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    name?: string;
    /**
     * 
     * @type {Passport}
     * @memberof Staff
     */
    passportByPassport?: Passport;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    patronymic?: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    surname?: string;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}

/**
 * 
 * @export
 * @interface Visitor
 */
export interface Visitor {
    /**
     * 
     * @type {string}
     * @memberof Visitor
     */
    birthday?: string;
    /**
     * 
     * @type {number}
     * @memberof Visitor
     */
    gender?: number;
    /**
     * 
     * @type {number}
     * @memberof Visitor
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Visitor
     */
    name?: string;
    /**
     * 
     * @type {Passport}
     * @memberof Visitor
     */
    passportByPassport?: Passport;
    /**
     * 
     * @type {string}
     * @memberof Visitor
     */
    patronymic?: string;
    /**
     * 
     * @type {Array&lt;Services&gt;}
     * @memberof Visitor
     */
    services?: Array<Services>;
    /**
     * 
     * @type {string}
     * @memberof Visitor
     */
    surname?: string;
}

/**
 * 
 * @export
 * @interface WorkingHours
 */
export interface WorkingHours {
    /**
     * 
     * @type {string}
     * @memberof WorkingHours
     */
    dateend?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkingHours
     */
    datestart?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkingHours
     */
    id?: number;
    /**
     * 
     * @type {Staff}
     * @memberof WorkingHours
     */
    staffByStaff?: Staff;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * PassportControllerApi - fetch parameter creator
 * @export
 */
export const PassportControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a passport
         * @param {Passport} passport passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(passport: Passport, options: any = {}): FetchArgs {
            // verify required parameter 'passport' is not null or undefined
            if (passport === null || passport === undefined) {
                throw new RequiredError('passport','Required parameter passport was null or undefined when calling createUsingPOST.');
            }
            const localVarPath = `/passport`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Passport" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(passport || {}) : (passport || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a passport
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE.');
            }
            const localVarPath = `/passport/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a passport
         * @param {number} id id
         * @param {Passport} passport passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(id: number, passport: Passport, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT.');
            }
            // verify required parameter 'passport' is not null or undefined
            if (passport === null || passport === undefined) {
                throw new RequiredError('passport','Required parameter passport was null or undefined when calling editUsingPUT.');
            }
            const localVarPath = `/passport/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Passport" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(passport || {}) : (passport || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/passport`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PassportControllerApi - functional programming interface
 * @export
 */
export const PassportControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a passport
         * @param {Passport} passport passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(passport: Passport, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Passport> {
            const localVarFetchArgs = PassportControllerApiFetchParamCreator(configuration).createUsingPOST(passport, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a passport
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PassportControllerApiFetchParamCreator(configuration).deleteUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a passport
         * @param {number} id id
         * @param {Passport} passport passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(id: number, passport: Passport, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Passport> {
            const localVarFetchArgs = PassportControllerApiFetchParamCreator(configuration).editUsingPUT(id, passport, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Passport>> {
            const localVarFetchArgs = PassportControllerApiFetchParamCreator(configuration).getAllpassportUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PassportControllerApi - factory interface
 * @export
 */
export const PassportControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a passport
         * @param {Passport} passport passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(passport: Passport, options?: any) {
            return PassportControllerApiFp(configuration).createUsingPOST(passport, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a passport
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options?: any) {
            return PassportControllerApiFp(configuration).deleteUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a passport
         * @param {number} id id
         * @param {Passport} passport passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(id: number, passport: Passport, options?: any) {
            return PassportControllerApiFp(configuration).editUsingPUT(id, passport, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all passport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET(options?: any) {
            return PassportControllerApiFp(configuration).getAllpassportUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * PassportControllerApi - object-oriented interface
 * @export
 * @class PassportControllerApi
 * @extends {BaseAPI}
 */
export class PassportControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a passport
     * @param {} passport passport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassportControllerApi
     */
    public createUsingPOST(passport: Passport, options?: any) {
        return PassportControllerApiFp(this.configuration).createUsingPOST(passport, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a passport
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassportControllerApi
     */
    public deleteUsingDELETE(id: number, options?: any) {
        return PassportControllerApiFp(this.configuration).deleteUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a passport
     * @param {} id id
     * @param {} passport passport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassportControllerApi
     */
    public editUsingPUT(id: number, passport: Passport, options?: any) {
        return PassportControllerApiFp(this.configuration).editUsingPUT(id, passport, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all passport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassportControllerApi
     */
    public getAllpassportUsingGET(options?: any) {
        return PassportControllerApiFp(this.configuration).getAllpassportUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * RegistrationControllerApi - fetch parameter creator
 * @export
 */
export const RegistrationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a registration
         * @param {Registration} registration registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(registration: Registration, options: any = {}): FetchArgs {
            // verify required parameter 'registration' is not null or undefined
            if (registration === null || registration === undefined) {
                throw new RequiredError('registration','Required parameter registration was null or undefined when calling createUsingPOST1.');
            }
            const localVarPath = `/registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Registration" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(registration || {}) : (registration || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a registration
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE1.');
            }
            const localVarPath = `/registration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a registration
         * @param {number} id id
         * @param {Registration} registration registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, registration: Registration, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT1.');
            }
            // verify required parameter 'registration' is not null or undefined
            if (registration === null || registration === undefined) {
                throw new RequiredError('registration','Required parameter registration was null or undefined when calling editUsingPUT1.');
            }
            const localVarPath = `/registration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Registration" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(registration || {}) : (registration || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET1(options: any = {}): FetchArgs {
            const localVarPath = `/registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
export const RegistrationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a registration
         * @param {Registration} registration registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(registration: Registration, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Registration> {
            const localVarFetchArgs = RegistrationControllerApiFetchParamCreator(configuration).createUsingPOST1(registration, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a registration
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RegistrationControllerApiFetchParamCreator(configuration).deleteUsingDELETE1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a registration
         * @param {number} id id
         * @param {Registration} registration registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, registration: Registration, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Registration> {
            const localVarFetchArgs = RegistrationControllerApiFetchParamCreator(configuration).editUsingPUT1(id, registration, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Registration>> {
            const localVarFetchArgs = RegistrationControllerApiFetchParamCreator(configuration).getAllpassportUsingGET1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RegistrationControllerApi - factory interface
 * @export
 */
export const RegistrationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a registration
         * @param {Registration} registration registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(registration: Registration, options?: any) {
            return RegistrationControllerApiFp(configuration).createUsingPOST1(registration, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a registration
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any) {
            return RegistrationControllerApiFp(configuration).deleteUsingDELETE1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a registration
         * @param {number} id id
         * @param {Registration} registration registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, registration: Registration, options?: any) {
            return RegistrationControllerApiFp(configuration).editUsingPUT1(id, registration, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all registration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET1(options?: any) {
            return RegistrationControllerApiFp(configuration).getAllpassportUsingGET1(options)(fetch, basePath);
        },
    };
};

/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a registration
     * @param {} registration registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public createUsingPOST1(registration: Registration, options?: any) {
        return RegistrationControllerApiFp(this.configuration).createUsingPOST1(registration, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a registration
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public deleteUsingDELETE1(id: number, options?: any) {
        return RegistrationControllerApiFp(this.configuration).deleteUsingDELETE1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a registration
     * @param {} id id
     * @param {} registration registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public editUsingPUT1(id: number, registration: Registration, options?: any) {
        return RegistrationControllerApiFp(this.configuration).editUsingPUT1(id, registration, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public getAllpassportUsingGET1(options?: any) {
        return RegistrationControllerApiFp(this.configuration).getAllpassportUsingGET1(options)(this.fetch, this.basePath);
    }

}

/**
 * RoomControllerApi - fetch parameter creator
 * @export
 */
export const RoomControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a room
         * @param {Room} room room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(room: Room, options: any = {}): FetchArgs {
            // verify required parameter 'room' is not null or undefined
            if (room === null || room === undefined) {
                throw new RequiredError('room','Required parameter room was null or undefined when calling createUsingPOST2.');
            }
            const localVarPath = `/room`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Room" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(room || {}) : (room || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a room
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE2.');
            }
            const localVarPath = `/room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a room
         * @param {number} id id
         * @param {Room} room room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, room: Room, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT2.');
            }
            // verify required parameter 'room' is not null or undefined
            if (room === null || room === undefined) {
                throw new RequiredError('room','Required parameter room was null or undefined when calling editUsingPUT2.');
            }
            const localVarPath = `/room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Room" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(room || {}) : (room || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllroomUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/room`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomControllerApi - functional programming interface
 * @export
 */
export const RoomControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a room
         * @param {Room} room room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(room: Room, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Room> {
            const localVarFetchArgs = RoomControllerApiFetchParamCreator(configuration).createUsingPOST2(room, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a room
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomControllerApiFetchParamCreator(configuration).deleteUsingDELETE2(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a room
         * @param {number} id id
         * @param {Room} room room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, room: Room, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Room> {
            const localVarFetchArgs = RoomControllerApiFetchParamCreator(configuration).editUsingPUT2(id, room, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllroomUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Room>> {
            const localVarFetchArgs = RoomControllerApiFetchParamCreator(configuration).getAllroomUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RoomControllerApi - factory interface
 * @export
 */
export const RoomControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a room
         * @param {Room} room room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(room: Room, options?: any) {
            return RoomControllerApiFp(configuration).createUsingPOST2(room, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a room
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any) {
            return RoomControllerApiFp(configuration).deleteUsingDELETE2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a room
         * @param {number} id id
         * @param {Room} room room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, room: Room, options?: any) {
            return RoomControllerApiFp(configuration).editUsingPUT2(id, room, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllroomUsingGET(options?: any) {
            return RoomControllerApiFp(configuration).getAllroomUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * RoomControllerApi - object-oriented interface
 * @export
 * @class RoomControllerApi
 * @extends {BaseAPI}
 */
export class RoomControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a room
     * @param {} room room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public createUsingPOST2(room: Room, options?: any) {
        return RoomControllerApiFp(this.configuration).createUsingPOST2(room, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a room
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public deleteUsingDELETE2(id: number, options?: any) {
        return RoomControllerApiFp(this.configuration).deleteUsingDELETE2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a room
     * @param {} id id
     * @param {} room room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public editUsingPUT2(id: number, room: Room, options?: any) {
        return RoomControllerApiFp(this.configuration).editUsingPUT2(id, room, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public getAllroomUsingGET(options?: any) {
        return RoomControllerApiFp(this.configuration).getAllroomUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * ServicesControllerApi - fetch parameter creator
 * @export
 */
export const ServicesControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a services
         * @param {Services} services services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(services: Services, options: any = {}): FetchArgs {
            // verify required parameter 'services' is not null or undefined
            if (services === null || services === undefined) {
                throw new RequiredError('services','Required parameter services was null or undefined when calling createUsingPOST3.');
            }
            const localVarPath = `/services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Services" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(services || {}) : (services || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a services
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE3.');
            }
            const localVarPath = `/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a services
         * @param {number} id id
         * @param {Services} services services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, services: Services, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT3.');
            }
            // verify required parameter 'services' is not null or undefined
            if (services === null || services === undefined) {
                throw new RequiredError('services','Required parameter services was null or undefined when calling editUsingPUT3.');
            }
            const localVarPath = `/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Services" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(services || {}) : (services || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllservicesUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesControllerApi - functional programming interface
 * @export
 */
export const ServicesControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a services
         * @param {Services} services services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(services: Services, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Services> {
            const localVarFetchArgs = ServicesControllerApiFetchParamCreator(configuration).createUsingPOST3(services, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a services
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ServicesControllerApiFetchParamCreator(configuration).deleteUsingDELETE3(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a services
         * @param {number} id id
         * @param {Services} services services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, services: Services, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Services> {
            const localVarFetchArgs = ServicesControllerApiFetchParamCreator(configuration).editUsingPUT3(id, services, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllservicesUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Services>> {
            const localVarFetchArgs = ServicesControllerApiFetchParamCreator(configuration).getAllservicesUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ServicesControllerApi - factory interface
 * @export
 */
export const ServicesControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a services
         * @param {Services} services services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(services: Services, options?: any) {
            return ServicesControllerApiFp(configuration).createUsingPOST3(services, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a services
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options?: any) {
            return ServicesControllerApiFp(configuration).deleteUsingDELETE3(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a services
         * @param {number} id id
         * @param {Services} services services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, services: Services, options?: any) {
            return ServicesControllerApiFp(configuration).editUsingPUT3(id, services, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllservicesUsingGET(options?: any) {
            return ServicesControllerApiFp(configuration).getAllservicesUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * ServicesControllerApi - object-oriented interface
 * @export
 * @class ServicesControllerApi
 * @extends {BaseAPI}
 */
export class ServicesControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a services
     * @param {} services services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesControllerApi
     */
    public createUsingPOST3(services: Services, options?: any) {
        return ServicesControllerApiFp(this.configuration).createUsingPOST3(services, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a services
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesControllerApi
     */
    public deleteUsingDELETE3(id: number, options?: any) {
        return ServicesControllerApiFp(this.configuration).deleteUsingDELETE3(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a services
     * @param {} id id
     * @param {} services services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesControllerApi
     */
    public editUsingPUT3(id: number, services: Services, options?: any) {
        return ServicesControllerApiFp(this.configuration).editUsingPUT3(id, services, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesControllerApi
     */
    public getAllservicesUsingGET(options?: any) {
        return ServicesControllerApiFp(this.configuration).getAllservicesUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * StaffControllerApi - fetch parameter creator
 * @export
 */
export const StaffControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a staff
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(staff: Staff, options: any = {}): FetchArgs {
            // verify required parameter 'staff' is not null or undefined
            if (staff === null || staff === undefined) {
                throw new RequiredError('staff','Required parameter staff was null or undefined when calling createUsingPOST4.');
            }
            const localVarPath = `/staff`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Staff" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(staff || {}) : (staff || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a staff
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE4.');
            }
            const localVarPath = `/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a staff
         * @param {number} id id
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(id: number, staff: Staff, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT4.');
            }
            // verify required parameter 'staff' is not null or undefined
            if (staff === null || staff === undefined) {
                throw new RequiredError('staff','Required parameter staff was null or undefined when calling editUsingPUT4.');
            }
            const localVarPath = `/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Staff" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(staff || {}) : (staff || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET2(options: any = {}): FetchArgs {
            const localVarPath = `/staff`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffControllerApi - functional programming interface
 * @export
 */
export const StaffControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a staff
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(staff: Staff, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Staff> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).createUsingPOST4(staff, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a staff
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).deleteUsingDELETE4(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a staff
         * @param {number} id id
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(id: number, staff: Staff, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Staff> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).editUsingPUT4(id, staff, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET2(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Staff>> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).getAllpassportUsingGET2(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StaffControllerApi - factory interface
 * @export
 */
export const StaffControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a staff
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(staff: Staff, options?: any) {
            return StaffControllerApiFp(configuration).createUsingPOST4(staff, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a staff
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options?: any) {
            return StaffControllerApiFp(configuration).deleteUsingDELETE4(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a staff
         * @param {number} id id
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(id: number, staff: Staff, options?: any) {
            return StaffControllerApiFp(configuration).editUsingPUT4(id, staff, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllpassportUsingGET2(options?: any) {
            return StaffControllerApiFp(configuration).getAllpassportUsingGET2(options)(fetch, basePath);
        },
    };
};

/**
 * StaffControllerApi - object-oriented interface
 * @export
 * @class StaffControllerApi
 * @extends {BaseAPI}
 */
export class StaffControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a staff
     * @param {} staff staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public createUsingPOST4(staff: Staff, options?: any) {
        return StaffControllerApiFp(this.configuration).createUsingPOST4(staff, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a staff
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public deleteUsingDELETE4(id: number, options?: any) {
        return StaffControllerApiFp(this.configuration).deleteUsingDELETE4(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a staff
     * @param {} id id
     * @param {} staff staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public editUsingPUT4(id: number, staff: Staff, options?: any) {
        return StaffControllerApiFp(this.configuration).editUsingPUT4(id, staff, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public getAllpassportUsingGET2(options?: any) {
        return StaffControllerApiFp(this.configuration).getAllpassportUsingGET2(options)(this.fetch, this.basePath);
    }

}

/**
 * VisitorControllerApi - fetch parameter creator
 * @export
 */
export const VisitorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a visitor
         * @param {Visitor} visitor visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(visitor: Visitor, options: any = {}): FetchArgs {
            // verify required parameter 'visitor' is not null or undefined
            if (visitor === null || visitor === undefined) {
                throw new RequiredError('visitor','Required parameter visitor was null or undefined when calling createUsingPOST5.');
            }
            const localVarPath = `/visitor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Visitor" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(visitor || {}) : (visitor || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a visitor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE5.');
            }
            const localVarPath = `/visitor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a visitor
         * @param {number} id id
         * @param {Visitor} visitor visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, visitor: Visitor, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT5.');
            }
            // verify required parameter 'visitor' is not null or undefined
            if (visitor === null || visitor === undefined) {
                throw new RequiredError('visitor','Required parameter visitor was null or undefined when calling editUsingPUT5.');
            }
            const localVarPath = `/visitor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Visitor" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(visitor || {}) : (visitor || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllvisitorUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/visitor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VisitorControllerApi - functional programming interface
 * @export
 */
export const VisitorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a visitor
         * @param {Visitor} visitor visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(visitor: Visitor, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Visitor> {
            const localVarFetchArgs = VisitorControllerApiFetchParamCreator(configuration).createUsingPOST5(visitor, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a visitor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VisitorControllerApiFetchParamCreator(configuration).deleteUsingDELETE5(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a visitor
         * @param {number} id id
         * @param {Visitor} visitor visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, visitor: Visitor, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Visitor> {
            const localVarFetchArgs = VisitorControllerApiFetchParamCreator(configuration).editUsingPUT5(id, visitor, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllvisitorUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Visitor>> {
            const localVarFetchArgs = VisitorControllerApiFetchParamCreator(configuration).getAllvisitorUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VisitorControllerApi - factory interface
 * @export
 */
export const VisitorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a visitor
         * @param {Visitor} visitor visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(visitor: Visitor, options?: any) {
            return VisitorControllerApiFp(configuration).createUsingPOST5(visitor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a visitor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any) {
            return VisitorControllerApiFp(configuration).deleteUsingDELETE5(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a visitor
         * @param {number} id id
         * @param {Visitor} visitor visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, visitor: Visitor, options?: any) {
            return VisitorControllerApiFp(configuration).editUsingPUT5(id, visitor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all visitor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllvisitorUsingGET(options?: any) {
            return VisitorControllerApiFp(configuration).getAllvisitorUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * VisitorControllerApi - object-oriented interface
 * @export
 * @class VisitorControllerApi
 * @extends {BaseAPI}
 */
export class VisitorControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a visitor
     * @param {} visitor visitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public createUsingPOST5(visitor: Visitor, options?: any) {
        return VisitorControllerApiFp(this.configuration).createUsingPOST5(visitor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a visitor
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public deleteUsingDELETE5(id: number, options?: any) {
        return VisitorControllerApiFp(this.configuration).deleteUsingDELETE5(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a visitor
     * @param {} id id
     * @param {} visitor visitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public editUsingPUT5(id: number, visitor: Visitor, options?: any) {
        return VisitorControllerApiFp(this.configuration).editUsingPUT5(id, visitor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all visitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public getAllvisitorUsingGET(options?: any) {
        return VisitorControllerApiFp(this.configuration).getAllvisitorUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * WorkingHoursControllerApi - fetch parameter creator
 * @export
 */
export const WorkingHoursControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a workinghours
         * @param {WorkingHours} workinghours workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST6(workinghours: WorkingHours, options: any = {}): FetchArgs {
            // verify required parameter 'workinghours' is not null or undefined
            if (workinghours === null || workinghours === undefined) {
                throw new RequiredError('workinghours','Required parameter workinghours was null or undefined when calling createUsingPOST6.');
            }
            const localVarPath = `/workinghours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkingHours" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(workinghours || {}) : (workinghours || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a workinghours
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE6.');
            }
            const localVarPath = `/workinghours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a workinghours
         * @param {number} id id
         * @param {WorkingHours} workinghours workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT6(id: number, workinghours: WorkingHours, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT6.');
            }
            // verify required parameter 'workinghours' is not null or undefined
            if (workinghours === null || workinghours === undefined) {
                throw new RequiredError('workinghours','Required parameter workinghours was null or undefined when calling editUsingPUT6.');
            }
            const localVarPath = `/workinghours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkingHours" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(workinghours || {}) : (workinghours || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllworkinghoursUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/workinghours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkingHoursControllerApi - functional programming interface
 * @export
 */
export const WorkingHoursControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a workinghours
         * @param {WorkingHours} workinghours workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST6(workinghours: WorkingHours, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WorkingHours> {
            const localVarFetchArgs = WorkingHoursControllerApiFetchParamCreator(configuration).createUsingPOST6(workinghours, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a workinghours
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WorkingHoursControllerApiFetchParamCreator(configuration).deleteUsingDELETE6(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a workinghours
         * @param {number} id id
         * @param {WorkingHours} workinghours workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT6(id: number, workinghours: WorkingHours, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WorkingHours> {
            const localVarFetchArgs = WorkingHoursControllerApiFetchParamCreator(configuration).editUsingPUT6(id, workinghours, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllworkinghoursUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<WorkingHours>> {
            const localVarFetchArgs = WorkingHoursControllerApiFetchParamCreator(configuration).getAllworkinghoursUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkingHoursControllerApi - factory interface
 * @export
 */
export const WorkingHoursControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a workinghours
         * @param {WorkingHours} workinghours workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST6(workinghours: WorkingHours, options?: any) {
            return WorkingHoursControllerApiFp(configuration).createUsingPOST6(workinghours, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a workinghours
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(id: number, options?: any) {
            return WorkingHoursControllerApiFp(configuration).deleteUsingDELETE6(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a workinghours
         * @param {number} id id
         * @param {WorkingHours} workinghours workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT6(id: number, workinghours: WorkingHours, options?: any) {
            return WorkingHoursControllerApiFp(configuration).editUsingPUT6(id, workinghours, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all workinghours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllworkinghoursUsingGET(options?: any) {
            return WorkingHoursControllerApiFp(configuration).getAllworkinghoursUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * WorkingHoursControllerApi - object-oriented interface
 * @export
 * @class WorkingHoursControllerApi
 * @extends {BaseAPI}
 */
export class WorkingHoursControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a workinghours
     * @param {} workinghours workinghours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkingHoursControllerApi
     */
    public createUsingPOST6(workinghours: WorkingHours, options?: any) {
        return WorkingHoursControllerApiFp(this.configuration).createUsingPOST6(workinghours, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a workinghours
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkingHoursControllerApi
     */
    public deleteUsingDELETE6(id: number, options?: any) {
        return WorkingHoursControllerApiFp(this.configuration).deleteUsingDELETE6(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a workinghours
     * @param {} id id
     * @param {} workinghours workinghours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkingHoursControllerApi
     */
    public editUsingPUT6(id: number, workinghours: WorkingHours, options?: any) {
        return WorkingHoursControllerApiFp(this.configuration).editUsingPUT6(id, workinghours, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all workinghours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkingHoursControllerApi
     */
    public getAllworkinghoursUsingGET(options?: any) {
        return WorkingHoursControllerApiFp(this.configuration).getAllworkinghoursUsingGET(options)(this.fetch, this.basePath);
    }

}

